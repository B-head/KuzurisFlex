<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:v="view.*"
			   creationComplete="init()"
			   width="854" height="480">
	<fx:Script>
		<![CDATA[
			import common.*;
			import events.*;
			import flash.events.*;
			import flash.utils.*;
			import model.*;
			import network.*;
			import mx.events.*;
			
			[Bindable]
			private var networkManager:NetworkManager;
			[Bindable]
			private var roomManager:LobbyManager;
			[Bindable]
			private var battleRecords:BattleRecords;
			
			private function init():void
			{
				battleRecords = SharedObjectHelper.battleRecords;
				networkManager = new NetworkManager();
				networkManager.addTerget(KuzurisEvent.connectClosed, disconnectedListener);
				networkManager.addTerget(KuzurisEvent.connectIdleTimeout, connectIdleTimeoutListener);
				networkManager.addTerget(KuzurisEvent.loungeConnectSuccess, loungeConnectSuccessListener);
				networkManager.addTerget(KuzurisErrorEvent.ioError, loungeConnectErrorListener);
				networkManager.addTerget(KuzurisErrorEvent.loungeConnectFailed, loungeConnectErrorListener);
				networkManager.connect();
				stateText.text = "ラウンジに接続中…";
				currentState = "loungeConnecting";
			}
			
			private function close():void
			{
				networkManager.disconnect();
				dispatchEvent(new KuzurisEvent(KuzurisEvent.navigateBack));
			}
			
			private function loungeConnectSuccessListener(e:KuzurisEvent):void
			{
				roomManager = new LobbyManager(networkManager);
				roomManager.addTerget(KuzurisEvent.roomConnectSuccess, roomConnectSuccessListener);
				roomManager.addTerget(KuzurisErrorEvent.differPassword, roomConnectErrorListener);
				roomManager.addTerget(KuzurisErrorEvent.roomConnectFailed, roomConnectErrorListener);
				currentState = "selectRoom";
				roomManager.setRoomFilter(selectGameMode.selectedIndex);
			}
			
			private function disconnectedListener(e:KuzurisEvent):void
			{
				stateText.text = "ネットワークから切断されました。";
				currentState = "closeing";
			}
			
			private function connectIdleTimeoutListener(e:KuzurisEvent):void
			{
				stateText.text = "一定時間操作しなかったため、接続がタイムアウトしました。";
				currentState = "closeing";
			}
			
			private function loungeConnectErrorListener(e:KuzurisErrorEvent):void
			{
				stateText.text = e.text + "\r不安定でごめんなさい。";
				currentState = "closeing";
			}
			
			private function roomConnectErrorListener(e:KuzurisErrorEvent):void
			{
				stateText.text = e.text + "\r不安定でごめんなさい。";
				currentState = "loungeError";
			}
			
			public function gameAbortListener(e:KuzurisErrorEvent):void
			{	
				stateText.text = e.text + "\r不安定でごめんなさい。";
				currentState = "closeing";
			}
		
			private function requestReplayListener(e:RequestReplayEvent):void
			{
				return;
			}
			
			private function createRoom():void
			{
				stateText.text = "ルームに接続中…";
				currentState = "roomConnecting";
				var name:String = roomName.text;
				if (name == "") name = roomName.prompt;
				var multi:Boolean = multiType.selectedIndex == 0;
				var gmIndex:int = createGameMode.selectedIndex;
				roomManager.createRoom(name, false, multi, gmIndex);
			}
			
			public function quickEnterRoom(multi:Boolean):void
			{
				stateText.text = "ルームに接続中…";
				currentState = "roomConnecting";
				var gmIndex:int = selectGameMode.selectedIndex;
				roomManager.quickEnterRoom(multi, gmIndex);
			}
			
			public function enterRoom(roomIndex:int, playerIndex:int = -1):void
			{
				stateText.text = "ルームに接続中…";
				currentState = "roomConnecting";
				var room:RoomInformation = roomManager.rooms.getItemAt(roomIndex) as RoomInformation;
				roomManager.selfEnterRoom(room, playerIndex);
			}
			
			private function roomConnectSuccessListener(e:KuzurisEvent):void
			{
				currentState = roomManager.currentRoom.multi ? "multi" : "duel";
			}
			
			private function leaveRoom():void
			{
				roomManager.selfLeaveRoom();
				currentState = 'selectRoom';
				parentApplication.bgm.stop();
			}
			
			private function playerNameChangeListener():void
			{
				roomManager.selfPlayerInfo.name = playerName.text;
			}
			
			private function gameModeChangeListener():void
			{
				roomManager.setRoomFilter(selectGameMode.selectedIndex);
			}
		]]>
	</fx:Script>

	<fx:Metadata>
		[Event(name="navigateBack", type="events.KuzurisEvent")]
	</fx:Metadata>
	
	<s:states>
		<s:State name="loungeConnecting" stateGroups="state" />
		<s:State name="roomConnecting" stateGroups="lounge, state" />
		<s:State name="closeing" stateGroups="state, ok" />
		<s:State name="loungeError" stateGroups="lounge, state, ok" />
		<s:State name="selectRoom" stateGroups="lounge" />
		<s:State name="createRoom" stateGroups="lounge" />
		<s:State name="keyConfig" stateGroups="lounge" />
		<s:State name="battleRecords" />
		<s:State name="duel" />
		<s:State name="multi" />
	</s:states>
	
	<s:BorderContainer includeIn="lounge" x="24" y="24" width="806" height="432" enabled="false" enabled.selectRoom="true">
		<s:layout>
			<s:VerticalLayout horizontalAlign="justify" paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4"/>
		</s:layout>
		<s:HGroup verticalAlign="middle" horizontalAlign="center">
			<s:Label text="プレイヤー名"/>
			<s:TextInput id="playerName" widthInChars="10" maxChars="10" change="playerNameChangeListener()"
				text="{roomManager.selfPlayerInfo.name}" prompt="{roomManager.selfPlayerInfo.makeDefaultName()}"/>
			<s:Button label="対戦履歴" buttonDown="currentState='battleRecords'" />
			<s:Button label="キーコンフィグ" buttonDown="currentState='keyConfig'" />
			<s:Button styleName="back" label="おわる" buttonDown="close()" />
		</s:HGroup>
		<s:HGroup verticalAlign="middle" horizontalAlign="center">
			<s:Button styleName="start" label="おまかせ6人部屋" buttonDown="quickEnterRoom(true)" />
			<s:Button styleName="start" label="おまかせ2人部屋" buttonDown="quickEnterRoom(false)"/>
			<s:Button styleName="create-room" label="ルーム作成" buttonDown="currentState='createRoom'" />
		</s:HGroup>
		<s:HGroup verticalAlign="middle" horizontalAlign="center">
			<s:ButtonBar id="selectGameMode" requireSelection="true" selectedIndex="1" change="gameModeChangeListener()">  
				<mx:ArrayCollection source="['クラシック', 'ディグ']"/>
			</s:ButtonBar>
		</s:HGroup>
		<s:BorderContainer height="335">
			<s:DataGroup id="roomList" left="0" right="15" height="100%" dataProvider="{roomManager.rooms}">
				<s:layout>
					<s:TileLayout clipAndEnableScrolling="true" useVirtualLayout="true" requestedColumnCount="3" columnAlign="justifyUsingWidth" 
						paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4" verticalGap="4" horizontalGap="4"/>
				</s:layout>
				<s:itemRenderer>
					<fx:Component>
						<v:RoomRenderer click="outerDocument.enterRoom(itemIndex)" enterBattle="outerDocument.enterRoom(itemIndex, event.playerIndex)"/>
					</fx:Component>
				</s:itemRenderer>
			</s:DataGroup>
			<s:VScrollBar viewport="{roomList}" right="0" height="100%"/>
		</s:BorderContainer>
	</s:BorderContainer>
	<s:BorderContainer includeIn="createRoom" verticalCenter="0" horizontalCenter="0">
		<s:layout>
			<s:VerticalLayout verticalAlign="middle" horizontalAlign="center" paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4"/>
		</s:layout>
		<s:Label text="ルーム設定"/>
		<s:HGroup verticalAlign="middle">
			<s:Label text="ルーム名"/>
			<s:TextInput id="roomName" widthInChars="20" maxChars="20" prompt="{roomManager.makeDefaultName(false)}" />
		</s:HGroup>
		<s:ButtonBar id="multiType" width="200" requireSelection="true" selectedIndex="0">  
			<mx:ArrayCollection source="['6人部屋', '2人部屋']"/>
		</s:ButtonBar>
		<s:ButtonBar id="createGameMode" requireSelection="true" selectedIndex="{selectGameMode.selectedIndex}">  
			<mx:ArrayCollection source="['クラシック', 'ディグ']"/>
		</s:ButtonBar>
		<s:HGroup>
			<s:Button label="作成" width="100" buttonDown="createRoom()" />
			<s:Button styleName="back" label="キャンセル" width="100" buttonDown="currentState='selectRoom'" />
		</s:HGroup>
	</s:BorderContainer>
	<v:KeyConfig includeIn="keyConfig" verticalCenter="0" horizontalCenter="0" input="{roomManager.selfInput}" navigateBack="currentState = 'selectRoom'"/>
	<v:BattleRecordsViewer includeIn="battleRecords" battleRecords="{battleRecords}" navigateBack="currentState = 'selectRoom'"/>
	<v:NetworkBattleDuel includeIn="duel" itemDestructionPolicy="auto" networkManager="{networkManager}" roomManager="{roomManager}"
		navigateBack="leaveRoom()" gameAbort="gameAbortListener(event)" />
	<v:NetworkBattleMulti includeIn="multi" itemDestructionPolicy="auto" networkManager="{networkManager}" roomManager="{roomManager}" 
		navigateBack="leaveRoom()" gameAbort="gameAbortListener(event)" />
	<s:BorderContainer includeIn="state" verticalCenter="0" horizontalCenter="0">
		<s:layout>
			<s:VerticalLayout verticalAlign="middle" horizontalAlign="center" paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4"/>
		</s:layout>
		<s:Label id="stateText"/>
		<s:Button includeIn="ok" label="OK" buttonDown.closeing="close()" buttonDown.loungeError="currentState = 'selectRoom'" />
	</s:BorderContainer>
</s:Group>