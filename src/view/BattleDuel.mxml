<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:v="view.*"
		   initialize="init()"
		   frameConstructed ="frameConstructedListener()">
			   
	<fx:Script>
		<![CDATA[
		import events.*;
		import flash.events.*;
		import flash.ui.*;
		import model.*;
		import model.ai.*;
		
		[Bindable]
		private var manager:GameManager;
		[Bindable]
		private var input1:GameControl;
		[Bindable]
		private var input2:GameControl;
		[Bindable]
		private var battleRecords:BattleRecords;
		[Bindable]
		private var isResult:Boolean;
		private var autoStart:Boolean;
		private var replayContainer:GameReplayContainer;
		
		private function init():void
		{
			parentApplication.addEventListener(KuzurisEvent.pressPauseKey, pauseListener, false, 0, true);
			manager = new GameManager(2);
			manager.addTerget(KuzurisEvent.gameStart, startListener);
			manager.addTerget(KuzurisEvent.gameEnd, endListener);
			input1 = SharedObjectHelper.input;
			input2 = GameAIManager.createDefaultAI();
			battleRecords = SharedObjectHelper.battleRecords;
			manager.initialize();
			prepare();
		}
		
		private function close():void
		{
			parentApplication.bgm.stop();
			parentApplication.removeEventListener(KuzurisEvent.pressPauseKey, pauseListener);
			manager.dispose();
			dispatchEvent(new KuzurisEvent(KuzurisEvent.navigateBack));
		}
		
		private function changePlayer():void
		{
			if (playerType1.selectedIndex == 0 && playerType2.selectedIndex == 0)
			{
				input1 = SharedObjectHelper.inputVersus1;
				input2 = SharedObjectHelper.inputVersus2;
			}
			else
			{
				input1 = getPlayer(playerType1.selectedIndex);
				input2 = getPlayer(playerType2.selectedIndex);
			}
		}
		
		private function getPlayer(si:int):GameControl
		{
			if (si == 0)
			{
				return SharedObjectHelper.input;
			}
			else
			{
				return GameAIManager.createDefaultAI();
			}
		}
		
		private function prepare():void
		{
			parentApplication.bgm.stop();
			manager.endGame();
			currentState = "prepare";
		}
		
		private function start():void
		{
			manager.initialize();
			manager.setPlayer(0, input1);
			manager.setPlayer(1, input2);
			manager.setHandicap(0, handicap1.value);
			manager.setHandicap(1, handicap2.value);
			manager.setAILevel(0, aiLevel1.value);
			manager.setAILevel(1, aiLevel2.value);
			manager.startGame(GameSetting.createBattleSetting(battleMode.selectedIndex));
			currentState = "hidden";
			setFocus();
			isResult = false;
		}
		
		public function replayStart(replay:GameReplayContainer):void
		{
			replayContainer = replay;
			manager.initialize();
			manager.startReplay(replay);
			currentState = "hidden";
			setFocus();
			isResult = false;
		}
		
		private function restart():void
		{
			if (manager.isReplayMode())
			{
				replayStart(replayContainer);
			}
			else
			{
				start();
			}
		}
		
		private function end():void
		{
			if (manager.isReplayMode())
			{
				close();
			}
			else
			{
				prepare();
			}
		}
		
		private function replayResult():void
		{
			parentApplication.bgm.stop();
			currentState = "replayResult";
		}
		
		private function pauseing():void
		{
			if (!manager.isExecution()) return;
			parentApplication.bgm.stop();
			manager.phaseGame();
			currentState = "pause";
		}
		
		private function resume():void
		{
			parentApplication.bgm.play(true);
			manager.resumeGame();
			currentState = "hidden";
			setFocus();
		}
		
		private function pauseListener(e:KuzurisEvent):void
		{
			switch(currentState)
			{
				case "prepare":
					start();
					break;
				case "pause":
					resume();
					break;
				case "hidden":
					pauseing();
					break;
			}
		}
		
		private function startListener(e:KuzurisEvent):void
		{
			parentApplication.bgm.play(false);
		}
		
		private function endListener(e:KuzurisEvent):void
		{
			recordView1.record = manager.getRecord(0);
			recordView2.record = manager.getRecord(1);
			isResult = true;
			if (manager.isReplayMode())
			{
				replayResult();
			}
			else
			{
				prepare();
			}
			if (manager.isReplayMode()) return;
			replayContainer = manager.makeReplayContainer();
			battleRecords.entry(replayContainer);
		}
		
		private function frameConstructedListener():void
		{
			if (currentState == "prepare" && Main.autoBattleRepeat)
			{
				start();
			}
			manager.forwardGame();
			player1.update();
			player2.update();
		}
		]]>
	</fx:Script>

	<fx:Metadata>
		[Event(name="navigateBack", type="events.KuzurisEvent")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:GlowFilter id="glow" color="{Color.black}" blurX="2" blurY="2" strength="255" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="hidden" />
		<s:State name="prepare" />
		<s:State name="pause" />
		<s:State name="replayResult" />
		<s:State name="keyConfig" />
		<s:State name="battleRecords" />
	</s:states>
	
	<v:GameView id="player1" x="18" y="24" battle="true" reverse="false" visible.battleRecords="false" playerIndex="0" gameManager="{manager}"/>
	<v:GameView id="player2" x="436" y="24" battle="true" reverse="true" visible.battleRecords="false" playerIndex="1" gameManager="{manager}" />
	<v:DetailedRecordView id="recordView1" x="0" y="0" width="118" height="480" battle="true" visible="{isResult}" />
	<v:DetailedRecordView id="recordView2" x="736" y="0" width="118" height="480" battle="true" visible="{isResult}" />
	<v:KeyConfig includeIn="keyConfig" x="18" y="88" input="{input1 as UserInput}" visible="{input1 is UserInput}" navigateBack="currentState = 'prepare'"/>
	<v:KeyConfig includeIn="keyConfig" x="436" y="88" input="{input2 as UserInput}" visible="{input2 is UserInput}" navigateBack="currentState = 'prepare'"/>
	<v:BattleRecordsViewer includeIn="battleRecords" battleRecords="{battleRecords}" navigateBack="currentState = 'prepare'"/>
	<s:VGroup includeIn="prepare" x="352" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Button styleName="start" width="150" label="スタート" buttonDown="start()" />
		<s:Label styleName="menu-label" text="対戦モード" />
		<s:ButtonBar id="battleMode" width="150" requireSelection="true" selectedIndex="0">  
			<mx:ArrayCollection source="['クラシック', 'ディグ']"/>
		</s:ButtonBar>
		<s:Button width="150" label="対戦履歴" buttonDown="currentState = 'battleRecords'" />
		<s:Button width="150" label="キーコンフィグ" enabled="{input1 is UserInput || input2 is UserInput}" buttonDown="currentState = 'keyConfig'"/>
		<s:Button styleName="back" width="100" label="もどる" buttonDown="close()" />
	</s:VGroup>
	<s:VGroup includeIn="prepare" x="143" y="288" width="150" height="120" verticalAlign="middle" horizontalAlign="center">
		<s:ButtonBar id="playerType1" width="150" requireSelection="true" selectedIndex="0" changing="changePlayer()">  
			<mx:ArrayCollection source="['人間', 'AI']"/>
		</s:ButtonBar>
		<s:Label styleName="menu-label" text="ハンデキャップ{handicap1.value}" />
		<s:HSlider id="handicap1" width="150" minimum="0" maximum="3" snapInterval="0.5" showDataTip="false" />
		<s:Label styleName="menu-label" text="AIレベル{aiLevel1.value}" visible="{playerType1.selectedIndex == 1}" />
		<s:HSlider id="aiLevel1" width="150" minimum="1" maximum="20" showDataTip="false" visible="{playerType1.selectedIndex == 1}" />
	</s:VGroup>
	<s:VGroup includeIn="prepare" x="561" y="288" width="150" height="120" verticalAlign="middle" horizontalAlign="center">
		<s:ButtonBar id="playerType2" width="150" requireSelection="true" selectedIndex="1" changing="changePlayer()">  
			<mx:ArrayCollection source="['人間', 'AI']"/>
		</s:ButtonBar>
		<s:Label styleName="menu-label" text="ハンデキャップ{handicap2.value}" />
		<s:HSlider id="handicap2" width="150" minimum="0" maximum="3" snapInterval="0.5" showDataTip="false" />
		<s:Label styleName="menu-label" text="AIレベル{aiLevel2.value}" visible="{playerType2.selectedIndex == 1}" />
		<s:HSlider id="aiLevel2" width="150" minimum="1" maximum="20" showDataTip="false" visible="{playerType2.selectedIndex == 1}" />
	</s:VGroup>
	<s:VGroup includeIn="pause" x="143" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Button width="100" label="つづける" buttonDown="resume()" />
		<s:Button width="100" label="はじめから" buttonDown="restart()" />
		<s:Button styleName="back" width="100" label="おわる" buttonDown="end()" />
	</s:VGroup>
	<s:VGroup includeIn="replayResult" x="143" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Button width="100" label="もういちど" buttonDown="restart()" />
		<s:Button styleName="back" width="100" label="おわる" buttonDown="end()" />
	</s:VGroup>
	<s:Label styleName="outcome win" x="{manager.getRank(0) == 1 ? 122 : 540}" y="128" width="192" visible="{isResult}" text="勝利" filters="{[glow]}"/>
	<s:Label styleName="outcome lose" x="{manager.getRank(0) == 1 ? 540 : 122}" y="128" width="192" visible="{isResult}" text="敗北" filters="{[glow]}"/>
</s:Group>