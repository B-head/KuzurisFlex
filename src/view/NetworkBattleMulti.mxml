<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:v="view.*"
			   initialize="init()"
			   frameConstructed ="frameConstructedListener()">
	<fx:Script>
		<![CDATA[
			import events.*;
			import flash.events.*;
			import flash.utils.*;
			import model.*;
			import model.network.*;
			import mx.events.*;
			
			[Bindable]
			public var networkManager:NetworkManager;
			[Bindable]
			public var roomManager:RoomManager;
			[Bindable]
			private var networkGameManager:NetworkGameManager;
			[Bindable]
			private var practiceGameManager:GameManager;
			[Bindable]
			private var isResult:Boolean;
			[Bindable]
			private var isFlip:Boolean;
			
			private function init():void
			{
				currentState = "hidden";
				parentApplication.addEventListener(KuzurisEvent.pressPauseKey, pauseListener, false, 0, true);
				textChat.init(networkManager.roomGroup, roomManager.selfPlayerInfo);
				networkGameManager = roomManager.createGameManager();
				networkGameManager.addTerget(KuzurisEvent.gameStart, startListener);
				networkGameManager.addTerget(KuzurisEvent.gameEnd, endListener);
				networkGameManager.addTerget(NetworkGameReadyEvent.networkGameReady, networkGameReadyListener);
				networkGameManager.addTerget(KuzurisEvent.playerUpdate, playerUpdateListener);
				networkGameManager.addTerget(KuzurisEvent.completedSyncState, completedSyncStateListener);
				networkGameManager.addTerget(KuzurisErrorEvent.gameAbort, gameAbortListener);
				networkGameManager.initialize();
				practiceGameManager = new GameManager(1);
				practiceGameManager.addTerget(KuzurisEvent.gameStart, startListener);
				practiceGameManager.addTerget(KuzurisEvent.gameEnd, practiceEndListener);
				networkGameManager.syncState();
			}
		
			private function close():void
			{
				parentApplication.bgm.stop();
				parentApplication.removeEventListener(KuzurisEvent.pressPauseKey, pauseListener);
				networkGameManager.dispose();
				practiceGameManager.dispose();
				dispatchEvent(new KuzurisEvent(KuzurisEvent.navigateBack));
			}
			
			private function enterBattle(index:int):void
			{
				roomManager.selfEnterBattle(index);
			}
			
			private function leaveBattle():void
			{
				roomManager.selfLeaveBattle();
			}
		
			private function prepare():void
			{
				if (currentState == "practice")
				{
					if (networkGameManager.isExecution() || networkGameManager.isStand()) return;
					parentApplication.bgm.stop();
					practiceGameManager.endGame();
				}
				if (networkGameManager.isEnter())
				{
					if (networkGameManager.isExecution())
					{
						currentState = (networkGameManager.isStand() ? "stand" : "hidden");
					}
					else
					{
						currentState = (networkGameManager.isStand() ? "stand" : "enter");
					}
				}
				else
				{
					currentState = "watch";
				}
				if (currentState == "enter" && Main.autoBattleRepeat && roomManager.isHostSelfPlayer())
				{
					start();
				}
			}
			
			private function start():void
			{
				networkGameManager.syncReady();
			}
			
			private function practiceStart():void
			{
				currentState = "practice";
				practiceGameManager.initialize();
				practiceGameManager.setPlayer(0, roomManager.selfInput, roomManager.selfPlayerInfo);
				practiceGameManager.startGame(roomManager.currentRoom.setting);
				setFocus();
				isResult = false;
			}
			
			private function completedSyncStateListener(e:KuzurisEvent):void
			{
				prepare();
			}
			
			private function networkGameReadyListener(e:NetworkGameReadyEvent):void
			{
				if (networkGameManager.isEnter())
				{
					currentState = "hidden";
				}
				networkGameManager.initialize();
				networkGameManager.startGame(e.setting, e.seed, e.delay);
				setFocus();
				isResult = false;
			}
		
			private function startListener(e:KuzurisEvent):void
			{
				parentApplication.bgm.play(false);
			}
		
			private function endListener(e:KuzurisEvent):void
			{
				parentApplication.bgm.stop();
				networkGameManager.endGame();
				practiceGameManager.endGame();
				recordView.record = networkGameManager.getRecord(0);
				support1.record = networkGameManager.getRecord(0);
				support2.record = networkGameManager.getRecord(1);
				support3.record = networkGameManager.getRecord(2);
				support4.record = networkGameManager.getRecord(3);
				support5.record = networkGameManager.getRecord(4);
				support6.record = networkGameManager.getRecord(5);
				SharedObjectHelper.battleRecords.entry(networkGameManager.makeReplayContainer());
				isResult = true;
				prepare();
			}
			
			private function practiceEndListener(e:KuzurisEvent):void
			{
				currentState = "hidden";
				parentApplication.bgm.stop();
				practiceGameManager.endGame();
				prepare();
			}
		
			private function pauseListener(e:KuzurisEvent):void
			{
				if (textChat.isFocus()) return;
				switch(currentState)
				{
					case "enter":
						start();
						break;
					case "stand":
						practiceStart();
						break;
					case "practice":
						practiceEndListener(e);
						break;
				}
			}
			
			public function playerUpdateListener(e:KuzurisEvent):void
			{
				prepare();
			}
			
			public function gameAbortListener(e:KuzurisErrorEvent):void
			{	
				close();
				dispatchEvent(e);
			}
		
			private function frameConstructedListener():void
			{
				networkGameManager.forwardGame();
				practiceGameManager.forwardGame();
				selfPlayer.update();
				player1.update();
				player2.update();
				player3.update();
				player4.update();
				player5.update();
				player6.update();
				practicePlayer.update();
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="navigateBack", type="events.KuzurisEvent")]
		[Event(name="gameAbort", type="events.KuzurisErrorEvent")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:GlowFilter id="glow" color="{Color.black}" blurX="2" blurY="2" strength="255" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="hidden" />
		<s:State name="practice"/>
		<s:State name="watch"/>
		<s:State name="stand" stateGroups="prepare" />
		<s:State name="enter" stateGroups="prepare" />
	</s:states>
	
	<v:GameView id="selfPlayer" x="{isFlip ? 436 : 18}" y="24" reverse="{isFlip}" battle="true"
		playerIndex="{networkGameManager.transPlayerIndex(0)}" gameManager="{networkGameManager}" visible.practice="false" visible.watch="false" />
	<v:GameView id="practicePlayer" x="{isFlip ? 436 : 18}" y="24" visible="false" visible.practice="true"
		reverse="{isFlip}" battle="true" playerIndex="0" gameManager="{practiceGameManager}"/>
	<s:Group x="{isFlip ? 540 : 122}" y="128" visible="{isResult}">
		<s:Label styleName="outcome win" width="192" visible="{networkGameManager.getRank(networkGameManager.transPlayerIndex(0)) == 1}"
			text="{networkGameManager.getRank(networkGameManager.transPlayerIndex(0))}位" filters="{[glow]}"/>
		<s:Label styleName="outcome lose" width="192" visible="{networkGameManager.getRank(networkGameManager.transPlayerIndex(0)) != 1}"
			text="{networkGameManager.getRank(networkGameManager.transPlayerIndex(0))}位" filters="{[glow]}"/>
	</s:Group>
	<v:DetailedRecordView id="recordView" x="{isFlip ? 736 : 0}" y="0" width="118" height="480" battle="true" visible="{isResult}" visible.watch="false"/>
	<s:Group x="{isFlip ? 18 : 436}" x.watch="227" y="8">
		<v:CompactGameView id="player1" x="0" y="0" z="-1" reverse="{isFlip}" visible="false" visible.watch="true" battle="true"
			playerIndex="{networkGameManager.transPlayerIndex(0)}" gameManager="{networkGameManager}" />
		<v:MultiSupportView id="support1" x="0" y="0" visible="false" visible.watch="true" isResult="{isResult}" isWatch="false" isWatch.watch="true" reverse="{isFlip}"
			playerIndex="{networkGameManager.transPlayerIndex(0)}" gameManager="{networkGameManager}" clickEnter="enterBattle(0)" />
		<v:CompactGameView id="player2" x="66" x.watch="133" y="0" z="-1" reverse="{isFlip}" battle="true"
			playerIndex="{networkGameManager.transPlayerIndex(1)}" gameManager="{networkGameManager}" />
		<v:MultiSupportView id="support2" x="66" x.watch="133" y="0" isResult="{isResult}" isWatch="false" isWatch.watch="true" reverse="{isFlip}"
			playerIndex="{networkGameManager.transPlayerIndex(1)}" gameManager="{networkGameManager}" clickEnter="enterBattle(1)" />
		<v:CompactGameView id="player3" x="200" x.watch="266" y="0" z="-1" reverse="{isFlip}" battle="true"
			playerIndex="{networkGameManager.transPlayerIndex(2)}" gameManager="{networkGameManager}" />
		<v:MultiSupportView id="support3" x="200" x.watch="266" y="0" isResult="{isResult}" isWatch="false" isWatch.watch="true" reverse="{isFlip}"
			playerIndex="{networkGameManager.transPlayerIndex(2)}" gameManager="{networkGameManager}" clickEnter="enterBattle(2)" />
		<v:CompactGameView id="player4" x="0" y="204" z="-2" reverse="{isFlip}" battle="true"
			playerIndex="{networkGameManager.transPlayerIndex(3)}" gameManager="{networkGameManager}" />
		<v:MultiSupportView id="support4" x="0" y="204" isResult="{isResult}" isWatch="false" isWatch.watch="true" reverse="{isFlip}"
			playerIndex="{networkGameManager.transPlayerIndex(3)}" gameManager="{networkGameManager}" clickEnter="enterBattle(3)" />
		<v:CompactGameView id="player5" x="133" y="204" z="-2" reverse="{isFlip}" battle="true"
			playerIndex="{networkGameManager.transPlayerIndex(4)}" gameManager="{networkGameManager}" />
		<v:MultiSupportView id="support5" x="133" y="204" isResult="{isResult}" isWatch="false" isWatch.watch="true" reverse="{isFlip}"
			playerIndex="{networkGameManager.transPlayerIndex(4)}" gameManager="{networkGameManager}" clickEnter="enterBattle(4)" />
		<v:CompactGameView id="player6" x="266" y="204" z="-2" reverse="{isFlip}" battle="true"
			playerIndex="{networkGameManager.transPlayerIndex(5)}" gameManager="{networkGameManager}" />
		<v:MultiSupportView id="support6" x="266" y="204" isResult="{isResult}" isWatch="false" isWatch.watch="true" reverse="{isFlip}"
			playerIndex="{networkGameManager.transPlayerIndex(5)}" gameManager="{networkGameManager}" clickEnter="enterBattle(5)" />
	</s:Group>
	<s:VGroup includeIn="prepare" x="{isFlip ? 561 : 143}" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Button includeIn="enter" styleName="start" width="150" label="スタート" buttonDown="start()" />
		<s:Button includeIn="stand" styleName="start" width="150" label="練習" buttonDown="practiceStart()" />
		<s:Button width="100" label="位置変更" buttonDown="isFlip = !isFlip" />
		<s:Button width="100" label="観戦" buttonDown="leaveBattle()" />
		<s:Button styleName="back" width="100" label="退室" buttonDown="close()" />
	</s:VGroup>
	<v:TextChatView id="textChat" x="322" x.watch="213" y="416" width="210" height="64" />
	<s:VGroup x="{isFlip ? 104 : 540 }" x.watch="431" y="416" width="210" height="64" verticalAlign="middle" horizontalAlign="center">
		<s:Button styleName="back" width="100" label="退室" buttonDown="close()" visible="false" visible.watch="true" />
		<s:BorderContainer width="100%">
			<s:layout>
				<s:VerticalLayout verticalAlign="middle" horizontalAlign="center"/>
			</s:layout>
			<s:Label text="{roomManager.currentRoom.name}"/>
		</s:BorderContainer>
	</s:VGroup>
</s:Group>