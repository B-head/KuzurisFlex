<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:v="view.*"
		 initialize="init()">
		 
	<fx:Script>
		<![CDATA[
		import events.*;
		import model.*;
		import model.network.*;
		import mx.events.*;
		
		[Bindable] 
		public var blockGraphics:BlockGraphics;
		[Bindable] 
		public var breakLineGraphics:BreakLineGraphics;
		[Bindable] 
		public var shockGraphics:ShockEffectGraphics;
		private var _gameManager:GameManager;
		[Bindable] 
		private var shockEffectHelper:ShockEffectHelper;
		[Bindable]
		private var _gameModel:GameModel;
		[Bindable]
		private var playerInfo:PlayerInformation;
		[Bindable]
		private var _playerIndex:int;
		[Bindable]
		private var line:BreakLineEvent;
		[Bindable]
		private var technicalSpin:BreakLineEvent;
		[Bindable]
		private var levelClear:LevelClearEvent;
		
		public function get gameManager():GameManager
		{
			return _gameManager;
		}
		public function set gameManager(value:GameManager):void
		{
			_gameManager = value;
			_gameManager.addEventListener(KuzurisEvent.gameReady, function():void { currentState = "ready" } );
			_gameManager.addEventListener(KuzurisEvent.gameStart, function():void { currentState = "normal" } );
			_gameManager.addEventListener(KuzurisEvent.gamePause, function():void { currentState = "pause" } );
			_gameManager.addEventListener(KuzurisEvent.gameResume, function():void { currentState = "normal" } );
			_gameManager.addEventListener(KuzurisEvent.initializeGameModel, setGameModel);
			_gameManager.addEventListener(KuzurisEvent.playerUpdate, updatePlayerListener);
			playerInfo = _gameManager.getPlayerInfo(_playerIndex);
		}
		
		public function get playerIndex():int
		{
			return _playerIndex;
		}
		public function set playerIndex(value:int):void
		{
			_playerIndex = value;
			if (_gameManager == null) return;
			playerInfo = _gameManager.getPlayerInfo(_playerIndex);
		}
		
		public function setGameModel(e:KuzurisEvent):void
		{
			_gameModel = _gameManager.getGameModel(_playerIndex);;
			main.update(_gameModel.getMainField(), _gameModel.shockSave);
			fall.update(_gameModel.getFallField(), _gameModel.shockSave);
			ghost.update(_gameModel.getControlOmino(), _gameModel.shockSave);
			control.update(_gameModel.getControlOmino(), _gameModel.shockSave);
			next.update(_gameModel.getNextOmino(), _gameModel.shockSave, true);
			obstacle.update();
			breakLineContainer.removeAllElements();
			_gameModel.addEventListener(GameEvent.forwardGame, updateFieldListener);
			_gameModel.addEventListener(GameEvent.forwardGame, updateControlListener);
			_gameModel.addEventListener(GameEvent.updateNext, updateNextListener);
			_gameModel.addEventListener(GameEvent.firstUpdateNext, updateNextListener);
			_gameModel.addEventListener(GameEvent.forwardGame, updateBreakLineListener);
			_gameModel.obstacleManager.addEventListener(GameEvent.updateObstacle, updateObstacleLestener);
			_gameModel.obstacleManager.addEventListener(GameEvent.outsideUpdateObstacle, updateObstacleLestener);
			_gameModel.addEventListener(BreakLineEvent.breakLine, breakLineListener);
			_gameModel.addEventListener(BreakLineEvent.sectionBreakLine, breakLineListener);
			_gameModel.addEventListener(BreakLineEvent.totalBreakLine, breakLineListener);
			_gameModel.addEventListener(BreakLineEvent.technicalSpin, technicalSpinListener);
			_gameModel.addEventListener(ShockBlockEvent.shockDamage, shockBlockListener);
			_gameModel.addEventListener(ShockBlockEvent.clearSpecialUnion, shockBlockListener);
			_gameModel.addEventListener(LevelClearEvent.levelClear, levelClearListener);
			_gameModel.addEventListener(GameEvent.blockAllClear, allClearListener);
			_gameModel.addEventListener(GameEvent.gameOver, function():void { currentState = "gameOver" } );
			_gameModel.addEventListener(GameEvent.gameClear, function():void { currentState = "gameClear"  } );
		}
		
		private function init():void
		{
			blockGraphics = Main.blockGraphics;
			breakLineGraphics = Main.breakLineGraphics;
			shockGraphics = Main.shockGraphics;
			shockEffectHelper = new ShockEffectHelper();
		}
		
		private function updatePlayerListener(e:KuzurisEvent):void
		{
			if (_gameManager == null) return;
			playerInfo = _gameManager.getPlayerInfo(_playerIndex);
		}
		
		private function updateFieldListener(e:GameEvent):void
		{
			main.update(_gameModel.getMainField(), _gameModel.shockSave);
			fall.update(_gameModel.getFallField(), _gameModel.shockSave);
		}
		
		private function updateControlListener(e:GameEvent):void
		{
			ghost.update(_gameModel.getControlOmino(), _gameModel.shockSave);
			control.update(_gameModel.getControlOmino(), _gameModel.shockSave);
		}
		
		private function updateNextListener(e:GameEvent):void
		{
			next.update(_gameModel.getNextOmino(), _gameModel.shockSave, e.type == GameEvent.firstUpdateNext);
		}
		
		private function updateObstacleLestener(e:GameEvent):void
		{
			if (_gameModel.isGameOver) return;
			obstacle.update();
		}
		
		private function updateBreakLineListener(e:GameEvent):void
		{
			for (var i:int = 0; i < breakLineContainer.numElements; i++)
			{
				var a:BreakLineEffect = BreakLineEffect(breakLineContainer.getElementAt(i));
				a.update();
			}
		}
		
		private function breakLineListener(e:BreakLineEvent):void
		{
			line = e;
			fieldRecordEffect.stop();
			fieldRecordEffect.play([lineRecord]);
			if (battle)
			{
				fieldRecordEffect.play([obstacleRecord]);
			}
			else
			{
				fieldRecordEffect.play([lineScore]);
			}
			if (e.comboCount > 0)
			{
				fieldRecordEffect.play([comboScore]);
			}
			else
			{
				comboScore.visible = false;
			}
			if (e.type == BreakLineEvent.breakLine)
			{
				var ble:BreakLineEffect = new BreakLineEffect();
				ble.lineEvent = e;
				ble.breakLineGraphics = breakLineGraphics;
				ble.y = e.position * blockGraphics.blockHeight - 256;
				ble.addEventListener(EffectEvent.EFFECT_END, function(e:EffectEvent):void { breakLineContainer.removeElement(ble); } );
				breakLineContainer.addElement(ble);
			}
			else if (e.type == BreakLineEvent.sectionBreakLine)
			{
				var powerLevel:int = Math.min(20, e.powerLevel());
				for (var i:int = 0; i < breakLineContainer.numElements; i++)
				{
					var a:BreakLineEffect = BreakLineEffect(breakLineContainer.getElementAt(i));
					a.powerLevel = powerLevel;
				}
			}
		}
		
		private function technicalSpinListener(e:BreakLineEvent):void
		{
			technicalSpin = e;
			bonusEffect.play([technicalSpinRecord, technicalSpinBonus]);
		}
		
		private function shockBlockListener(e:ShockBlockEvent):void
		{
			shockEffectHelper.registerShockBlockEvent(e);
		}
		
		private function levelClearListener(e:LevelClearEvent):void
		{
			levelClear = e;
			bonusEffect.play([levelUpRecord, levelUpBonus]);
		}
		
		private function allClearListener(e:GameEvent):void
		{
			bonusEffect.play([allClear, allClearBonus]);
		}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="ready" />
		<s:State name="pause" />
		<s:State name="gameOver" />
		<s:State name="gameClear" />
	</s:states>
	
	<fx:Declarations>
		<fx:Boolean id="battle"/>
		<fx:Boolean id="reverse"/>
		<v:GameSoundEffect gameModel="{_gameModel}"/>
		<s:NumberFormatter id="nf" fractionalDigits="2" trailingZeros="true" useGrouping="false" />
		<v:FrameTimeFormatter id="frameTime" frameRate="60"/>
		<s:Sequence id="fieldRecordEffect">
			<s:SetAction property="visible" value="true"/>
			<s:SetAction property="visible" value="false" startDelay="4000" />
		</s:Sequence>
		<s:Parallel id="bonusEffect">
			<s:Sequence>
				<s:Move xFrom="80" xTo="0" duration="250"/>
				<s:Move xFrom="0" xTo="-80" duration="250" startDelay="500"/>
			</s:Sequence>
			<s:Sequence>
				<s:Fade alphaFrom="0" alphaTo="1" duration="250"/>
				<s:Fade alphaFrom="1" alphaTo="0" duration="250" startDelay="500"/>
			</s:Sequence>
		</s:Parallel>
	</fx:Declarations>
	
	<s:Group x="104" y="0">
		<s:Rect x="15" y="64" width="161" height="320" alpha="0.8">
			<s:fill>
				<s:SolidColor color="#000000"/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="#ff9900" weight="1" />
			</s:stroke>
		</s:Rect>
		<s:Image x="0" y="64" source="@Embed('../graphic/frame.png')"/>
		<s:Group id="recordFieldView" x="0" y="64">
			<s:Label id="comboScore" styleName="break-combo-score" y="0" width="192" text="{line.comboCount}コンボ" visible="false"/>
			<s:Label id="lineRecord" styleName="field-record break-line" y="12" width="192" text="{line.line}ライン" visible="false"/>
			<s:Label id="lineScore" styleName="break-line-score" y="36" width="192" text="+{line.plusScore}点" visible="false"/>
			<s:Label id="obstacleRecord" styleName="obstacle-record" y="36" width="192" text="+{line.occurObstacle()}おじゃま[×{nf.format(line.powerScale())}]" visible="false"/>
			<s:Label id="technicalSpinBonus" styleName="technical-spin" y="48" width="192" text="+{technicalSpin.line}ライン" visible="false"/>
			<s:Label id="technicalSpinRecord" styleName="field-record technical-spin" y="60" width="192" text="{technicalSpin.line}ライン&#10;テクニカルスピン" visible="false"/>
			<s:Label id="levelUpBonus" styleName="level-up" y="48" width="192" text="+{levelClear.plusScore}点[{frameTime.format(levelClear.clearTime)}]" visible="false"/>
			<s:Label id="levelUpRecord" styleName="field-record level-up" y="60" width="192" text="{levelClear.upLevel > 1 ? levelClear.upLevel : ''}レベルアップ!" visible="false"/>
			<s:Label id="allClearBonus" styleName="all-clear" y="48" width="192" text="+100000点" visible="false"/>
			<s:Label id="allClear" styleName="field-record all-clear" y="60" width="192" text="オールクリア！" visible="false"/>
		</s:Group>
		<v:BlockFieldView id="ghost" blockGraphics="{blockGraphics}" shockGraphics="{shockGraphics}" shockEffectHelper="{shockEffectHelper}" visible.pause="false" x="{_gameModel.cox * blockGraphics.blockWidth + 16}" y="{_gameModel.goy * blockGraphics.blockHeight - 256}" showSpecial="true" alpha="0.5"/>
		<v:BlockFieldView id="control" blockGraphics="{blockGraphics}" shockGraphics="{shockGraphics}" shockEffectHelper="{shockEffectHelper}" visible.pause="false" x="{_gameModel.cox * blockGraphics.blockWidth + 16}" y="{_gameModel.coy * blockGraphics.blockHeight - 256}" showSpecial="true"/>
		<v:BlockFieldView id="main" blockGraphics="{blockGraphics}" shockGraphics="{shockGraphics}" shockEffectHelper="{shockEffectHelper}" visible.pause="false" x="16" y="-256" showSpecial="true"/>
		<v:BlockFieldView id="fall" blockGraphics="{blockGraphics}" shockGraphics="{shockGraphics}" shockEffectHelper="{shockEffectHelper}" visible.pause="false" x="16" y="{_gameModel.ffy * blockGraphics.blockHeight - 256}" showSpecial="true"/>
		<s:Group x="16" y="0" id="breakLineContainer"/>
		<v:ObstacleView id="obstacle" x="16" y="0" width="160" height="32" visible="false" obstacleManager="{_gameModel.obstacleManager}"/>
		<s:BorderContainer x="16" y="400" width="160" height="32" visible="{playerInfo != null}">
			<s:layout>
				<s:VerticalLayout verticalAlign="middle" horizontalAlign="justify" paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4" />
			</s:layout>
			<s:Label text="{playerInfo.getName()}" textAlign="center" />
		</s:BorderContainer>
		<s:Label styleName="ready" x="0" y="212" width="192" text="レディ" visible="false" visible.ready="true" />
		<s:Label id="gameOver" styleName="game-over" x="0" y="96" width="192" text="ゲームオーバー" visible="false"  visible.gameOver="true"/>
		<s:Label id="gameClear" styleName="game-clear" x="0" y="96" width="192" text="ゲームクリア！" visible="false"  visible.gameClear="true"/>
	</s:Group>
	<v:NextOminoView id="next" x="{reverse ? 0 : 304}" y="64" circleWidth="96" circleHeight="48" gap="4" blockGraphics="{blockGraphics}" shockGraphics="{shockGraphics}" pause="false" pause.pause="true"/>
	<s:VGroup x="{reverse ? 304 : 0}" y="64" width="96" horizontalAlign="justify">
		<s:BorderContainer>
			<s:layout>
				<s:VerticalLayout horizontalAlign="justify" paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4" />
			</s:layout>
			<s:Group includeInLayout="{!battle}" visible="{!battle}">
				<s:Label text="レベル"/>
				<s:Label text="{_gameModel.record.level}" right="0" />
			</s:Group>
			<s:Group>
				<s:Label text="ライン"/>
				<s:Label text="{_gameModel.record.breakLine}" right="0"/>
			</s:Group>
			<s:Group>
				<s:Label text="ミノ"/>
				<s:Label text="{_gameModel.record.fixOmino}" right="0"/>
			</s:Group>
		</s:BorderContainer>
		<s:BorderContainer>
			<s:layout>
				<s:VerticalLayout horizontalAlign="justify" paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4" />
			</s:layout>
			<s:Label text="スコア"/>
			<s:Label text="{_gameModel.record.gameScore}点" textAlign="right" />
			<s:Label text="タイム"/>
			<s:Label text="{frameTime.format(_gameModel.record.gameTime)}" textAlign="right" />
		</s:BorderContainer>
		<s:BorderContainer visible="{_gameModel.isObstacleAddition}">
			<s:layout>
				<s:VerticalLayout horizontalAlign="justify" paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4" />
			</s:layout>
			<s:Label text="次のおじゃま"/>
			<s:Label text="{frameTime.format(_gameModel.nextObstacleTime)}" textAlign="right"/>
		</s:BorderContainer>
	</s:VGroup>
</s:Group>