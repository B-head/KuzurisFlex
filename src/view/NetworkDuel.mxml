<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:v="view.*"
			   initialize="init()"
			   frameConstructed ="frameConstructedListener()">
	<fx:Script>
		<![CDATA[
			import events.*;
			import flash.events.*;
			import flash.utils.*;
			import model.*;
			import model.network.*;
			import mx.events.*;
			
			[Bindable]
			public var networkManager:NetworkManager;
			[Bindable]
			public var roomManager:RoomManager;
			[Bindable]
			private var networkGameManager:NetworkGameManager;
			[Bindable]
			private var practiceGameManager:GameManager;
			[Bindable]
			private var isResult:Boolean;
			[Bindable]
			private var isFlip:Boolean;
			
			private function init():void
			{
				parentApplication.addEventListener(KuzurisEvent.pressPauseKey, pauseListener);
				chat.init(networkManager.roomGroup, roomManager.selfPlayerInfo);
				networkGameManager = roomManager.createGameManager();
				networkGameManager.addEventListener(KuzurisEvent.gameStart, startListener);
				networkGameManager.addEventListener(KuzurisEvent.gameEnd, endListener);
				networkGameManager.addEventListener(NetworkGameReadyEvent.networkGameReady, networkGameReadyListener);
				networkGameManager.addEventListener(KuzurisEvent.playerUpdate, playerUpdateListener);
				networkGameManager.initialize();
				practiceGameManager = new GameManager(1);
				practiceGameManager.addEventListener(KuzurisEvent.gameStart, startListener);
				practiceGameManager.addEventListener(KuzurisEvent.gameEnd, practiceEndListener);
				prepare();
			}
			
			private function enterBattle(index:int):void
			{
				roomManager.selfEnterBattle(index);
			}
			
			private function leaveBattle():void
			{
				roomManager.selfLeaveBattle();
				isFlip = false;
			}
		
			private function prepare():void
			{
				if (currentState == "practice")
				{
					if (networkGameManager.isExecution() || networkGameManager.isStand()) return;
					parentApplication.bgm.stop();
					practiceGameManager.endGame();
				}
				if (networkGameManager.isEnter())
				{
					if (networkGameManager.isExecution())
					{
						currentState = (networkGameManager.isStand() ? "stand" : "hidden");
					}
					else
					{
						currentState = (networkGameManager.isStand() ? "stand" : "enter");
					}
				}
				else
				{
					currentState = "watch";
				}
			}
			
			private function start():void
			{
				networkGameManager.gameSync();
			}
			
			private function practiceStart():void
			{
				currentState = "practice";
				practiceGameManager.initialize();
				practiceGameManager.setPlayer(0, roomManager.selfInput);
				practiceGameManager.startGame();
				setFocus();
				isResult = false;
			}
			
			private function networkGameReadyListener(e:NetworkGameReadyEvent):void
			{
				currentState = "hidden";
				networkGameManager.initialize();
				networkGameManager.startGame(e.setting, e.seed, e.delay);
				setFocus();
				isResult = false;
			}
		
			private function startListener(e:KuzurisEvent):void
			{
				parentApplication.bgm.play(false);
			}
		
			private function endListener(e:KuzurisEvent):void
			{
				parentApplication.bgm.stop();
				networkGameManager.endGame();
				practiceGameManager.endGame();
				recordView1.record = networkGameManager.getRecord(0);
				recordView2.record = networkGameManager.getRecord(1);
				isResult = true;
				prepare();
			}
			
			private function practiceEndListener(e:KuzurisEvent):void
			{
				parentApplication.bgm.stop();
				practiceGameManager.endGame();
				currentState = "hidden";
				prepare();
			}
		
			private function pauseListener(e:KuzurisEvent):void
			{
				if (currentState != "practice") return;
				parentApplication.bgm.stop();
				practiceGameManager.endGame();
				currentState = "hidden";
				prepare();
			}
			
			public function playerUpdateListener(e:KuzurisEvent):void
			{
				prepare();
			}
			
			public function frameConstructedListener():void
			{
				networkGameManager.frameConstructedListener();
				practiceGameManager.frameConstructedListener();
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="navigateBack", type="events.KuzurisEvent")]
	</fx:Metadata>
	
	<s:states>
		<s:State name="hidden" />
		<s:State name="practice"/>
		<s:State name="watch"/>
		<s:State name="stand" stateGroups="prepare" />
		<s:State name="enter" stateGroups="prepare" />
	</s:states>
	
	<v:GameView id="player1" x="18" y="24" battle="true" reverse="false" playerIndex="{isFlip ? 1 : 0}"
		gameManager="{networkGameManager}" visible.practice="{networkGameManager.transFlip(isFlip)}" />
	<v:GameView id="player2" x="436" y="24" battle="true" reverse="true" playerIndex="{isFlip ? 0 : 1}"
		gameManager="{networkGameManager}" visible.practice="{!networkGameManager.transFlip(isFlip)}"/>
	<v:GameView id="practicePlayer" x="{networkGameManager.transFlip(isFlip) ? 436 : 18}" y="24" battle="true" visible="false" visible.practice="true"
		reverse="{networkGameManager.transFlip(isFlip)}" playerIndex="0" gameManager="{practiceGameManager}"/>
	<v:DetailedRecordView id="recordView1" x="0" y="0" width="118" height="480" battle="true" visible="{isResult}"/>
	<v:DetailedRecordView id="recordView2" x="736" y="0" width="118" height="480" battle="true" visible="{isResult}"/>
	<s:VGroup includeIn="prepare" x="{networkGameManager.transFlip(isFlip) ? 561 : 143}" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Button includeIn="enter" styleName="start" width="150" label="スタート" buttonDown="start()" />
		<s:Button includeIn="stand" styleName="start" width="150" label="練習" buttonDown="practiceStart()" />
		<s:Button width="100" label="位置変更" buttonDown="isFlip = !isFlip" />
		<s:Button width="100" label="観戦" buttonDown="leaveBattle()" />
		<s:Button styleName="back" width="100" label="退室" buttonDown="dispatchEvent(new KuzurisEvent(KuzurisEvent.navigateBack))" />
	</s:VGroup>
	<v:TextChatView id="chat" x="322" y="416" width="210" height="64" />
	<s:VGroup x="322" y="0" width="210" height="80" verticalAlign="middle" horizontalAlign="center">
		<s:BorderContainer width="100%">
			<s:layout>
				<s:VerticalLayout verticalAlign="middle" horizontalAlign="center"/>
			</s:layout>
			<s:Label text="{roomManager.currentRoom.name}"/>
		</s:BorderContainer>
		<s:Button styleName="back" width="100" label="退室" buttonDown="dispatchEvent(new KuzurisEvent(KuzurisEvent.navigateBack))" visible="false" visible.watch="true" />
	</s:VGroup>
	<s:VGroup x="143" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Button includeIn="watch" label="参加" buttonDown="enterBattle(0)" visible="{networkGameManager.isIndexEmpty(0)}" />
	</s:VGroup>
	<s:VGroup x="561" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Button includeIn="watch" label="参加" buttonDown="enterBattle(1)" visible="{networkGameManager.isIndexEmpty(1)}" />
	</s:VGroup>
</s:Group>