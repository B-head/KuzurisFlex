<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:v="view.*"
		 initialize="init()">
		 
	<fx:Script>
		<![CDATA[
		import events.*;
		import model.*;
		import model.network.*;
		import mx.events.*;
		
		[Bindable] 
		public var blockGraphics:BlockGraphics;
		[Bindable] 
		public var breakLineGraphics:BreakLineGraphics;
		private var _gameManager:GameManager;
		[Bindable]
		private var _gameModel:GameModel;
		[Bindable]
		private var playerInfo:PlayerInformation;
		[Bindable]
		private var _playerIndex:int;
		
		public function get gameManager():GameManager
		{
			return _gameManager;
		}
		public function set gameManager(value:GameManager):void
		{
			_gameManager = value;
			_gameManager.addTerget(KuzurisEvent.gameReady, function():void { currentState = "ready" }, false);
			_gameManager.addTerget(KuzurisEvent.gameStart, function():void { currentState = "normal" }, false);
			_gameManager.addTerget(KuzurisEvent.gamePause, function():void { currentState = "pause" }, false);
			_gameManager.addTerget(KuzurisEvent.gameResume, function():void { currentState = "normal" }, false);
			_gameManager.addTerget(KuzurisEvent.initializeGameModel, setGameModel);
			_gameManager.addTerget(KuzurisEvent.playerUpdate, updatePlayerListener);
			playerInfo = _gameManager.getPlayerInfo(_playerIndex);
		}
		
		public function get playerIndex():int
		{
			return _playerIndex;
		}
		public function set playerIndex(value:int):void
		{
			_playerIndex = value;
			if (_gameManager == null) return;
			playerInfo = _gameManager.getPlayerInfo(_playerIndex);
		}
		
		public function setGameModel(e:KuzurisEvent):void
		{
			_gameModel = _gameManager.getGameModel(_playerIndex);;
			main.update(_gameModel.getMainField(), _gameModel.shockSave);
			fall.update(_gameModel.getFallField(), _gameModel.shockSave);
			ghost.update(_gameModel.getControlOmino(), _gameModel.shockSave);
			control.update(_gameModel.getControlOmino(), _gameModel.shockSave);
			next.update(_gameModel.getNextOmino(), _gameModel.shockSave, true);
			obstacle.update();
			breakLineContainer.removeAllElements();
			_gameModel.addTerget(GameEvent.forwardGame, updateFieldListener);
			_gameModel.addTerget(GameEvent.forwardGame, updateControlListener);
			_gameModel.addTerget(GameEvent.updateNext, updateNextListener);
			_gameModel.addTerget(GameEvent.firstUpdateNext, updateNextListener);
			_gameModel.addTerget(GameEvent.forwardGame, updateBreakLineListener);
			_gameModel.obstacleManager.addTerget(GameEvent.updateObstacle, updateObstacleLestener);
			_gameModel.obstacleManager.addTerget(GameEvent.outsideUpdateObstacle, updateObstacleLestener);
			_gameModel.addTerget(BreakLineEvent.breakLine, breakLineListener);
			_gameModel.addTerget(BreakLineEvent.sectionBreakLine, breakLineListener);
			_gameModel.addTerget(BreakLineEvent.totalBreakLine, breakLineListener);
			_gameModel.addTerget(GameEvent.gameOver, function():void { currentState = "gameOver" }, false);
			_gameModel.addTerget(GameEvent.gameClear, function():void { currentState = "gameClear"  }, false);
		}
		
		private function init():void
		{
			blockGraphics = Main.compactBlockGraphics;
			breakLineGraphics = Main.compactBreakLineGraphics;
		}
		
		private function updatePlayerListener(e:KuzurisEvent):void
		{
			if (_gameManager == null) return;
			playerInfo = _gameManager.getPlayerInfo(_playerIndex);
		}
		
		private function updateFieldListener(e:GameEvent):void
		{
			main.update(_gameModel.getMainField(), _gameModel.shockSave);
			fall.update(_gameModel.getFallField(), _gameModel.shockSave);
		}
		
		private function updateControlListener(e:GameEvent):void
		{
			ghost.update(_gameModel.getControlOmino(), _gameModel.shockSave);
			control.update(_gameModel.getControlOmino(), _gameModel.shockSave);
		}
		
		private function updateNextListener(e:GameEvent):void
		{
			next.update(_gameModel.getNextOmino(), _gameModel.shockSave, e.type == GameEvent.firstUpdateNext);
		}
		
		private function updateObstacleLestener(e:GameEvent):void
		{
			if (_gameModel.isGameOver) return;
			obstacle.update();
		}
		
		private function updateBreakLineListener(e:GameEvent):void
		{
			for (var i:int = 0; i < breakLineContainer.numElements; i++)
			{
				var a:BreakLineEffect = BreakLineEffect(breakLineContainer.getElementAt(i));
				a.update();
			}
		}
		
		private function breakLineListener(e:BreakLineEvent):void
		{
			if (e.type == BreakLineEvent.breakLine)
			{
				var ble:BreakLineEffect = new BreakLineEffect();
				ble.lineEvent = e;
				ble.breakLineGraphics = breakLineGraphics;
				ble.y = e.position * blockGraphics.blockHeight - 144;
				ble.addEventListener(EffectEvent.EFFECT_END, function(e:EffectEvent):void { breakLineContainer.removeElement(ble); } );
				breakLineContainer.addElement(ble);
			}
			else if (e.type == BreakLineEvent.sectionBreakLine)
			{
				var powerLevel:int = Math.min(20, e.powerLevel());
				for (var i:int = 0; i < breakLineContainer.numElements; i++)
				{
					var a:BreakLineEffect = BreakLineEffect(breakLineContainer.getElementAt(i));
					a.powerLevel = powerLevel;
				}
			}
		}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="ready" />
		<s:State name="pause" />
		<s:State name="gameOver" />
		<s:State name="gameClear" />
	</s:states>
	
	<fx:Declarations>
		<fx:Boolean id="reverse"/>
		<v:GameSoundEffect gameModel="{_gameModel}"/>
		<s:NumberFormatter id="nf" fractionalDigits="2" trailingZeros="true" useGrouping="false" />
		<v:FrameTimeFormatter id="frameTime" frameRate="60"/>
	</fx:Declarations>
	
	<s:Group x="{reverse ? 36 : 0}" y="0" clipAndEnableScrolling="true" width="96" height="200">
		<s:Rect x="7" y="16" width="81" height="160" alpha="0.8">
			<s:fill>
				<s:SolidColor color="#000000"/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="#ff9900" weight="1" />
			</s:stroke>
		</s:Rect>
		<s:Image x="0" y="16" source="@Embed('../graphic/frame.png')" scaleX="0.5" scaleY="0.5" />
		<v:BlockFieldView id="ghost" blockGraphics="{blockGraphics}" visible.pause="false" 
			x="{_gameModel.cox * blockGraphics.blockWidth + 8}" y="{_gameModel.goy * blockGraphics.blockHeight - 144}" showSpecial="true" alpha="0.5"/>
		<v:BlockFieldView id="control" blockGraphics="{blockGraphics}" visible.pause="false" 
			x="{_gameModel.cox * blockGraphics.blockWidth + 8}" y="{_gameModel.coy * blockGraphics.blockHeight - 144}" showSpecial="true"/>
		<v:BlockFieldView id="main" blockGraphics="{blockGraphics}" visible.pause="false" 
			x="8" y="-144" showSpecial="true"/>
		<v:BlockFieldView id="fall" blockGraphics="{blockGraphics}" visible.pause="false" 
			x="8" y="{_gameModel.ffy * blockGraphics.blockHeight - 144}" showSpecial="true"/>
		<s:Group x="8" y="0" id="breakLineContainer"/>
		<v:ObstacleView id="obstacle" x="8" y="0" width="80" height="16" blockScale="0.5" visible="false" obstacleManager="{_gameModel.obstacleManager}"/>
		<s:BorderContainer x="0" y="176" width="96" height="24" visible="{playerInfo != null}">
			<s:layout>
				<s:VerticalLayout verticalAlign="middle" horizontalAlign="justify" paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4" />
			</s:layout>
			<s:Label text="{playerInfo.getName()}" textAlign="center" />
		</s:BorderContainer>
	</s:Group>
	<v:NextOminoView id="next" x="{reverse ? 0 : 96}" y="16" circleWidth="32" circleHeight="24" gap="2" blockGraphics="{blockGraphics}" pause="false" pause.pause="true" compact="true" />
</s:Group>