<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/halo" xmlns:v="view.*"
		 frameConstructed ="manager.frameConstructedListener()">

	<fx:Script>
		<![CDATA[
		import events.*;
		import flash.events.*;
		import model.*;
		
		[Bindable]
		private var manager:GameManager;
		[Bindable]
		private var mode:String;
		[Bindable]
		private var input:GameControl;
		[Bindable]
		private var replayContainer:GameReplayContainer;
		[Bindable]
		private var isRankingView:Boolean;
		
		public function init(mode:String):void
		{
			this.mode = mode;
			parentApplication.addEventListener(KuzurisEvent.pressPauseKey, pauseListener, false, 0, true);
			manager = new GameManager(1);
			input = SharedObjectHelper.input;
			manager.addTerget(KuzurisEvent.gameStart, startListener);
			manager.addTerget(KuzurisEvent.gameEnd, endListener);
			prepare();
		}
		
		private function close():void
		{
			parentApplication.removeEventListener(KuzurisEvent.pressPauseKey, pauseListener);
			manager.dispose();
			dispatchEvent(new KuzurisEvent(KuzurisEvent.navigateBack));
		}
		
		private function prepare():void
		{
			parentApplication.bgm.stop();
			manager.endGame();
			manager.initialize();
			isRankingView = false;
			currentState = "prepare";
		}
		
		private function ranking():void
		{
			isRankingView = true;
			currentState = 'ranking'
		}
		
		private function start():void
		{
			manager.initialize();
			manager.setPlayer(0, input);
			manager.startGame(GameSetting.createTrialSetting(mode, level.value, endless.selected));
			currentState = "hidden";
			setFocus();
		}
		
		private function replayStart(replay:GameReplayContainer):void
		{
			replayContainer = replay;
			manager.initialize();
			manager.startReplay(replay);
			currentState = "hidden";
			setFocus();
		}
		
		private function restart():void
		{
			if (isRankingView)
			{
				replayStart(replayContainer);
			}
			else
			{
				start();
			}
		}
		
		private function end():void
		{
			if (isRankingView)
			{
				ranking();
			}
			else
			{
				prepare();
			}
		}
		
		private function pauseing():void
		{
			if (!manager.isExecution()) return;
			parentApplication.bgm.stop();
			manager.phaseGame();
			currentState = "pause"
		}
		
		private function resume():void
		{
			parentApplication.bgm.play(true);
			manager.resumeGame();
			currentState = "hidden";
			setFocus();
		}
		
		private function pauseListener(e:KuzurisEvent):void
		{
			switch(currentState)
			{
				case "prepare":
					start();
					break;
				case "pause":
					resume();
					break;
				case "hidden":
					pauseing();
					break;
				case "result":
					prepare();
					break;
			}
		}
		
		private function startListener(e:KuzurisEvent):void
		{
			parentApplication.bgm.play(false);
		}
		
		private function endListener(e:KuzurisEvent):void
		{
			currentState = "result";
			parentApplication.bgm.stop();
			manager.endGame();
			recordView.record = manager.getRecord(0);
			if (!manager.isReplayMode())
			{
				var ranking:GameRanking = SharedObjectHelper.getRanking(mode, endless.selected);
				replayContainer = manager.makeReplayContainer();
				ranking.entry(replayContainer);
				SharedObjectHelper.shared.flush();
			}
			rankingView.update();
		}
		
		private function requestReplayListener(e:RequestReplayEvent):void
		{
			replayStart(e.data);
		}
		]]>
	</fx:Script>

	<fx:Metadata>
		[Event(name="navigateBack", type="events.KuzurisEvent")]
	</fx:Metadata>

	<s:states>
		<s:State name="hidden" />
		<s:State name="prepare" />
		<s:State name="result" />
		<s:State name="pause" />
		<s:State name="ranking" />
		<s:State name="keyConfig" />
	</s:states>

	<v:GameView id="main" x="227" y="24" battle="false" playerIndex="0" gameManager="{manager}" />
	<v:DetailedRecordView id="recordView" includeIn="result" x="0" y="0" width="223" height="480" battle="false" />
	<v:ResultRankingView id="rankingView" includeIn="result" x="631" y="0" width="223" height="480" gameMode="{mode}" endless="{endless.selected}" currentRecord="{replayContainer}" />
	<v:RankingViewer includeIn="ranking" x="24" y="24" gameMode="{mode}" endless="{endless.selected}" navigateBack="currentState = 'prepare'" requestReplay="requestReplayListener(event)" />
	<v:KeyConfig includeIn="keyConfig" x="227" y="88" input="{input as UserInput}" navigateBack="currentState = 'prepare'"/>
	<s:VGroup includeIn="prepare" x="352" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Label text="{GameSetting.modeToText(mode)}" />
		<s:Button styleName="start" width="150" label="スタート" buttonDown="start()"/>
		<s:Label styleName="menu-label" text="開始レベル{level.value}" />
		<s:HSlider id="level" width="150" minimum="1" maximum="20" showDataTip="false" />
		<s:CheckBox id="endless" label="エンドレス" />
		<s:Button width="150" label="ランキング" buttonDown="ranking()"/>
		<s:Button width="150" label="キーコンフィグ" buttonDown="currentState = 'keyConfig'"/>
		<s:Button styleName="back" width="100" label="もどる" buttonDown="close()" />
	</s:VGroup>
	<s:VGroup includeIn="pause" x="352" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Button width="100" label="つづける" buttonDown="resume()" />
		<s:Button width="100" label="はじめから" buttonDown="restart()" />
		<s:Button styleName="back" width="100" label="おわる" buttonDown="end()" />
	</s:VGroup>
	<s:VGroup includeIn="result" x="352" y="88" width="150" height="320" verticalAlign="middle" horizontalAlign="center">
		<s:Button width="100" label="もういちど" buttonDown="restart()" />
		<s:Button width="100" label="リプレイ" visible="{!isRankingView}" buttonDown="replayStart(replayContainer)" />
		<s:Button styleName="back" width="100" label="おわる" buttonDown="end()" />
	</s:VGroup>
</s:Group>
